/*
 * generated by Xtext 2.12.0
 */
package com.github.jucovschi.generator

import com.github.jucovschi.ocm.ChatModel
import com.github.jucovschi.ocm.ComplexCondition
import com.github.jucovschi.ocm.Condition
import com.github.jucovschi.ocm.Effect
import com.github.jucovschi.ocm.Effects
import com.github.jucovschi.ocm.IfStatement
import com.github.jucovschi.ocm.Import
import com.github.jucovschi.ocm.InitState
import com.github.jucovschi.ocm.Rule
import com.github.jucovschi.ocm.Settings
import com.github.jucovschi.ocm.SimpleCondition
import java.io.StringWriter
import javax.xml.parsers.DocumentBuilderFactory
import javax.xml.transform.OutputKeys
import javax.xml.transform.TransformerFactory
import javax.xml.transform.dom.DOMSource
import javax.xml.transform.stream.StreamResult
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.w3c.dom.Document
import org.w3c.dom.Element

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class OCMGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val docFactory = DocumentBuilderFactory.newInstance();
		val docBuilder = docFactory.newDocumentBuilder();
		val doc = docBuilder.newDocument();

		GenerateModule(doc, resource);
		
		val transformerFactory = TransformerFactory.newInstance();
        val transformer = transformerFactory.newTransformer();
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
        val source = new DOMSource(doc);
        
        val w = new StringWriter;
        val result = new StreamResult(w);

        transformer.transform(source, result);
        val fName = resource.URI.lastSegment;
		fsa.generateFile(fName.substring(0, fName.length-4)+".xml", w.buffer);
	}
	
	def GenerateModule(Document doc, Resource resource) {
		val domain = doc.createElement("domain");
		doc.appendChild(domain);

		for (e : resource.allContents.toIterable.filter(Import)) {
			val import = doc.createElement("import");
			import.setAttribute("href", e.importURI+".xml");
			domain.appendChild(import);		 	
		}
				
		for (e : resource.allContents.toIterable.filter(InitState)) {
			val init = doc.createElement("initialstate");
			domain.appendChild(init);
			for (v : e.effects) {
				for (t : v.effects) {
					val vars = doc.createElement("variable");
					val vals = doc.createElement("value");
					
					if (v.util != null) {
						vals.setAttribute("util", v.util.toString);
					}
					if (v.prob != null) {
						vals.setAttribute("prob", v.prob.toString);
					}
					
					val valsText = doc.createTextNode(t.value);
					init.appendChild(vars);
					vars.setAttribute("id", t.varName.name);
					
					//valsText.replaceWholeText(v.value);	
					vals.appendChild(valsText);
					vars.appendChild(vals);
					init.appendChild(vars);					
				}
			}
		}

		for (e : resource.allContents.toIterable.filter(Settings)) {
			val settings = doc.createElement("settings");
			domain.appendChild(settings);
			var i=0;		 	
			for (v : e.variable) {
				val setting = doc.createElement(v);	
				settings.appendChild(setting);
				val settingValue = doc.createTextNode(e.value.get(i));
				setting.appendChild(settingValue);
				i++;
			}
		}
			

		for (e : resource.allContents.toIterable.filter(ChatModel)) {
			val model = doc.createElement("model");
			domain.appendChild(model);
			model.setAttribute("trigger", e.triggers.map[name.toString].join(","));
			
			
			for (v : e.rules) {
				GenerateRule(doc, model, v);				
			}
		}		
	}
	
	def GenerateRule(Document doc, Element elem, Rule rule) {
		val ruleElem = doc.createElement("rule");
		elem.appendChild(ruleElem);
		if (rule.priority!=null) {
			ruleElem.setAttribute("priority", rule.priority);
		}
		if (rule.name!=null) {
			ruleElem.setAttribute("id", rule.name);
		}
		for (ifstats : rule.condcases) {
			GenerateCase(doc, ruleElem, ifstats);
		}
		for (ncase : rule.cases) {
			val caseElem2 = doc.createElement("case");
			ruleElem.appendChild(caseElem2);
			GenerateEffects(doc, caseElem2, ncase);
		}
	}
	
	def GenerateCase(Document doc, Element elem, IfStatement ifStats) {
		val caseElem = doc.createElement("case");
		elem.appendChild(caseElem);
			
		GenerateCondition(doc, caseElem, ifStats.condition);

		for (e : ifStats.effects) {
			GenerateEffects(doc, caseElem, e);
		}
	}
	
	def GenerateCondition(Document doc, Element elem, Condition cond) {
		val condElem = doc.createElement("condition");
		elem.appendChild(condElem);
		if (cond instanceof SimpleCondition) {
			GenerateSimpleCondition(doc, condElem, cond);			
		}
		if (cond instanceof ComplexCondition) {
			val condition = cond.condType.get(0);
			if ("or".equals(condition)) {
				condElem.setAttribute("operator", "or");
			}
			for (simpleCond : cond.condNode) {
				GenerateSimpleCondition(doc, condElem, simpleCond);
			}
		}
	}
	
	def GenerateSimpleCondition(Document doc, Element elem, SimpleCondition cond) {
		val ifElem = doc.createElement("if");
		elem.appendChild(ifElem);
		ifElem.setAttribute("var", cond.varName.name);
		ifElem.setAttribute("relation", cond.cond); 
		ifElem.setAttribute("value", cond.value);		
	}
	
	def GenerateEffects(Document doc, Element elem, Effects cond) {
		val effectElem = doc.createElement("effect");
		elem.appendChild(effectElem); 
		if (cond.util != null) {
			effectElem.setAttribute("util", cond.util.toString);
		}
		if (cond.prob != null) {
			effectElem.setAttribute("prob", cond.prob.toString);
		}
		for (e : cond.effects) {
			GenerateEffect(doc, effectElem, e);
		}
	}
	
	def GenerateEffect(Document doc, Element elem, Effect eff) {
		val setElem = doc.createElement("set");
		elem.appendChild(setElem);
		if (eff.predict==null) {
			setElem.setAttribute("var", eff.varName.name);		
		} else {
			setElem.setAttribute("var", eff.varName.name+"^p");					
		}
		setElem.setAttribute("value", eff.value); 
	}
	
}
